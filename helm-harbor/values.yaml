persistence:
  enabled: true
externalProtocol: https
# The FQDN for Harbor service
externalDomain: harbor.gdphdc.com
# The Port for Harbor service, leave empty if the service 
# is to be bound to port 80/443
externalPort: 
harborAdminPassword: PHp@ssw0rd
authenticationMode: "db_auth"
selfRegistration: "on"
ldap:
  url: "ldaps://ldapserver"
  searchDN: ""
  searchPassword: ""
  baseDN: ""
  filter: "(objectClass=person)"
  uid: "uid"
  scope: "2"
  timeout: "5"
  verifyCert: "True"
email:
  host: "smtp.gdphdc.com"
  port: "465"
  username: "gdphdc_xxfb@126.com"
  password: "PHp@ssw0rd"
  ssl: "true"
  insecure: "false"
  from: "admin <gdphdc_xxfb@126.com>"
  identity: ""

# The secret key used for encryption. Must be a string of 16 chars.
secretKey: not-a-secure-key

# These annotations allow the registry to work behind the nginx
# ingress controller.
ingress:
  enabled: true
  annotations:
    ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    ingress.kubernetes.io/proxy-body-size: "0"
    nginx.ingress.kubernetes.io/proxy-body-size: "0"
  tls:
    # Fill the secretName if you want to use the certificate of 
    # yourself when Harbor serves with HTTPS. A certificate will 
    # be generated automatically by the chart if leave it empty
    secretName: "harbor-ingress-sercret"

# The tag for Harbor docker images.
harborImageTag: &harbor_image_tag dev

adminserver:
  image:
    repository: goharbor/harbor-adminserver
    tag: *harbor_image_tag
    pullPolicy: IfNotPresent
  volumes:
    config:
      storageClass: "nfs-storage"
      accessMode: ReadWriteOnce
      size: 5Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

jobservice:
  image:
    repository: goharbor/harbor-jobservice
    tag: *harbor_image_tag
    pullPolicy: IfNotPresent
  secret: not-a-secure-secret
  maxWorkers: 50
# resources:
#   requests:
#     memory: 256Mi
#     cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

ui:
  image:
    repository: goharbor/harbor-ui
    tag: *harbor_image_tag
    pullPolicy: IfNotPresent
  secret: not-a-secure-secret
# resources:
#  requests:
#    memory: 256Mi
#    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

# TODO: change the style to be same with redis
database:
  # if external database is used, set "type" to "external"
  # and fill the connection informations in "external" section
  type: internal
  internal:
    image:
      repository: goharbor/harbor-db
      tag: *harbor_image_tag
      pullPolicy: IfNotPresent
    # the superuser password of database
    password: "PHp@ssw0rd"
    volumes:
      data:
        storageClass: "nfs-storage"
        accessMode: ReadWriteOnce
        size: 10Gi
    # resources:
    #  requests:
    #    memory: 256Mi
    #    cpu: 100m
    nodeSelector: {}
    tolerations: []
    affinity: {}
  external:
    host: "harbor-redis"
    port: "5432"
    username: "user"
    password: "password"
    coreDatabase: "registry"
    clairDatabase: "clair"
    notaryServerDatabase: "notary_server"
    notarySignerDatabase: "notary_signer"

registry:
  image:
    repository: goharbor/registry-photon
    tag: dev
    pullPolicy: IfNotPresent
  httpSecret: not-a-secure-secret
  logLevel: info
  storage:
    # specify the type of storage: "filesystem", "azure", "gcs", "s3", "swift", 
    # "oss" and fill the information needed in the corresponding section
    type: filesystem
    filesystem:
      rootdirectory: /var/lib/registry
      #maxthreads: 100
    azure:
      accountname: accountname
      accountkey: base64encodedaccountkey
      container: containername
      #realm: core.windows.net
    gcs:
      bucket: bucketname
      # TODO: support the keyfile of gcs
      #keyfile: /path/to/keyfile
      #rootdirectory: /gcs/object/name/prefix
      #chunksize: 5242880
    s3:
      region: us-west-1
      bucket: bucketname
      #accesskey: awsaccesskey
      #secretkey: awssecretkey
      #regionendpoint: http://myobjects.local
      #encrypt: false
      #keyid: mykeyid
      #secure: true
      #v4auth: true
      #chunksize: 5242880
      #rootdirectory: /s3/object/name/prefix
      #storageclass: STANDARD
    swift:
      authurl: https://storage.myprovider.com/v3/auth
      username: username
      password: password
      container: containername
      #region: fr
      #tenant: tenantname
      #tenantid: tenantid
      #domain: domainname
      #domainid: domainid
      #trustid: trustid
      #insecureskipverify: false
      #chunksize: 5M
      #prefix:
      #secretkey: secretkey
      #accesskey: accesskey
      #authversion: 3
      #endpointtype: public
      #tempurlcontainerkey: false
      #tempurlmethods:
    oss:
      accesskeyid: accesskeyid
      accesskeysecret: accesskeysecret
      region: regionname
      bucket: bucketname
      #endpoint: endpoint
      #internal: false
      #encrypt: false
      #secure: true
      #chunksize: 10M
      #rootdirectory: rootdirectory
  ## Persist data to a persistent volume
  volumes:
    data:
      storageClass: "nfs-storage"
      accessMode: ReadWriteOnce
      size: 100Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

chartmuseum:
  enabled: true
  image:
    repository: goharbor/chartmuseum-photon
    tag: dev
    pullPolicy: IfNotPresent
  volumes:
    data:
      storageClass: "nfs-storage"
      accessMode: ReadWriteOnce
      size: 50Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

clair:
  enabled: true
  image:
    repository: goharbor/clair-photon
    tag: dev
    pullPolicy: IfNotPresent
  volumes:
    pgData:
      storageClass: "nfs-storage"
      accessMode: ReadWriteOnce
      size: 5Gi
  # resources:
  #  requests:
  #    memory: 256Mi
  #    cpu: 100m
  nodeSelector: {}
  tolerations: []
  affinity: {}

redis:
  # if external Redis is used, set "external.enabled" to "true"
  # and fill the connection informations in "external" section.
  # or the internal Redis will be used
  usePassword: false
  password: "changeit"
  cluster:
    enabled: false
  master:
    persistence:
# TODO: There is a perm issue: Can't open the append-only file: Permission denied
# TODO: Setting it to false is a temp workaround.  Will re-visit this problem.
      enabled: false
  external:
    enabled: false
    host: "harbor-redis.default"
    port: "6379"
    databaseIndex: "0"
    usePassword: false
    password: "changeit"

notary:
  enabled: true
  server:
    image:
      repository: goharbor/notary-server-photon
      tag: dev
      pullPolicy: IfNotPresent
  signer:
    image:
      repository: goharbor/notary-signer-photon
      tag: dev
      pullPolicy: IfNotPresent
    env:
      NOTARY_SIGNER_DEFAULTALIAS: defaultalias
    # The TLS certificate for Notary Signer. Will auto generate them if unspecified here.
    caCrt: |
      -----BEGIN CERTIFICATE-----
      MIIDyDCCArCgAwIBAgIUGF5j0UPC029GVK3gSFuYrkguQQUwDQYJKoZIhvcNAQEL
      BQAwajESMBAGA1UECBMJR3VhbmdEb25nMRAwDgYDVQQHEwdIdWlaaG91MQ0wCwYD
      VQQKEwRQSERDMQ0wCwYDVQQLEwR4eHp4MSQwIgYDVQQDExtQaW5nSGFpIFBvd2Vy
      UGxhbnQgQ28uLCBMdGQwHhcNMTgwMjExMDMwODAwWhcNMjMwMjEwMDMwODAwWjBq
      MRIwEAYDVQQIEwlHdWFuZ0RvbmcxEDAOBgNVBAcTB0h1aVpob3UxDTALBgNVBAoT
      BFBIREMxDTALBgNVBAsTBHh4engxJDAiBgNVBAMTG1BpbmdIYWkgUG93ZXJQbGFu
      dCBDby4sIEx0ZDCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBAK8CGXgt
      HF+6QfOmKpChrdiDFYmlrRvBa35xLqPaGORhxNefrXpi/qPDDFBxM/sepv0muEgd
      wZ/Ro9D1orpm/mS+LjA1O1HCwnjSWE6l3LJkF4MI01O7AUyt4wbjkd7r94eUxQ0H
      7mydSVwZ76/h4c8lAtjp38cC1SpuJj5/FT1CsMPBcRO+5yP/Euye13gPX/cyKjFy
      goN4mkPKFI5GDM8bJlI1eV5AEGFMQntIiAcWd/maxwGkAKYT9Je4QiCqXO/Dp6Sj
      8JkO7r0Vayv+1kKoRHk0+UrEZPXE/DiGglnmtFApY57mis+ek7dVtw+nLrXGUjF5
      D9pxiN5zDfsp+IkCAwEAAaNmMGQwDgYDVR0PAQH/BAQDAgEGMBIGA1UdEwEB/wQI
      MAYBAf8CAQIwHQYDVR0OBBYEFE5Eg36y1DNTQLqBE1iIs8lue62yMB8GA1UdIwQY
      MBaAFE5Eg36y1DNTQLqBE1iIs8lue62yMA0GCSqGSIb3DQEBCwUAA4IBAQBzusXL
      3T/blKBcvFLVBgc3IZqI/Hz/o7l7UZCcEEaHjMJGMcZaM/rtJJ9eC5I0tY6w71EQ
      XT9V16usO6Cwaezl5QJmEkLyFSsxvdi3M+wnxB32ku6n9Nl/hUvaQzkR58eb73Do
      zFYxCUJbJzYaTUR2hqw/z/UvZP/wJk+i+tsSB1RgLeOfzVM9GBRlrk0Bax0HKXdx
      CMNHeTur7FwhjG11iqOY79B6vY3MZbat8oze7kHvYMBl7yXbzCwH11XnUpScXcFh
      tp4zOKmWSow97C/3VPXYsrLhBHZNay4kiCD4hwUE+infPREg8Z4ihl5fKUoeljVZ
      P9npt09BgltRtyHF
      -----END CERTIFICATE-----
    tlsCrt: |
      -----BEGIN CERTIFICATE-----
      MIIEFDCCAvygAwIBAgIUO41UXddyirKudcHBJCrUtDlEI90wDQYJKoZIhvcNAQEL
      BQAwajESMBAGA1UECBMJR3VhbmdEb25nMRAwDgYDVQQHEwdIdWlaaG91MQ0wCwYD
      VQQKEwRQSERDMQ0wCwYDVQQLEwR4eHp4MSQwIgYDVQQDExtQaW5nSGFpIFBvd2Vy
      UGxhbnQgQ28uLCBMdGQwHhcNMTgwMjExMDMxNDAwWhcNMjgwMjA5MDMxNDAwWjCB
      gTEkMCIGA1UEBhMbUGluZ0hhaSBQb3dlclBsYW50IENvLiwgTHRkMRIwEAYDVQQI
      EwlHdWFuZ0RvbmcxEDAOBgNVBAcTB0h1aVpob3UxDTALBgNVBAoTBFBIREMxDTAL
      BgNVBAsTBHh4engxFTATBgNVBAMTDCouZ2RwaGRjLmNvbTCCASIwDQYJKoZIhvcN
      AQEBBQADggEPADCCAQoCggEBAL3uvzEKVMtRC7FOyBjFPUQbZBGtDnZLw6lCLJAj
      RZvacCrpEbPbXjzkuer1h6P2zKe/9jY2+8rn9EJwTm3+aNxNqJgjw9FrbL3U3pm4
      biIAuoGb28XQFPgJNpuCCETezMb0AHZz+XjYPF3naDk57TayLE3Y46Xb9h88wroK
      7XgzyC1MtcoxVV/KDERsYRLq0pI38L0mMmPF0kE13yxGphkXsSKxkc54R62JKOVh
      DEuWqBvUojt3O5UC5AOENitJhE3vQK5SkNiqf32LcB6Fuk1B6KkqdBaJ4vqXliLS
      r4vP4Ca9ghgsW30lhE0lrp8FztsKNUy/coXYVcSa3+iB+GkCAwEAAaOBmTCBljAO
      BgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwG
      A1UdEwEB/wQCMAAwHQYDVR0OBBYEFLAajTbZ86zV4XtTLnAOWwXAJb6BMB8GA1Ud
      IwQYMBaAFE5Eg36y1DNTQLqBE1iIs8lue62yMBcGA1UdEQQQMA6CDCouZ2RwaGRj
      LmNvbTANBgkqhkiG9w0BAQsFAAOCAQEAdn06r0nwDoqVNNEo1PDardyAZ5V16YyO
      Znv8iIrI60afSDFAMZ3xO1N9ysy5Y25R+XTfTgNoW+7SU5/+3xm4yyOkum+RfmgQ
      VUI7yIJMI4Yh1av0kQfjKZRMwOiDNUrslXoWhkzPFbtUaVUXBQmJSJNTZZfkG054
      9JAo7aBGlTMkD9tdV6gbkAJPkNpd8VHG041Mp/kLzQWSMPdFnTAMk9vBrvDggJ0q
      nGMuCpGa1F7JmS/52E+VWIHK1SUlrC6eCpilz5koYPQUuyeRSSe2JMAwx7rQCB5j
      vhWZ+HnUwcANVnEn3G72YDeUERwbYvbUwMDY3ISFikDd5gY5m0cyYA==
      -----END CERTIFICATE-----    
    tlsKey: |
      -----BEGIN RSA PRIVATE KEY-----
      MIIEpAIBAAKCAQEAve6/MQpUy1ELsU7IGMU9RBtkEa0OdkvDqUIskCNFm9pwKukR
      s9tePOS56vWHo/bMp7/2Njb7yuf0QnBObf5o3E2omCPD0WtsvdTembhuIgC6gZvb
      xdAU+Ak2m4IIRN7MxvQAdnP5eNg8XedoOTntNrIsTdjjpdv2HzzCugrteDPILUy1
      yjFVX8oMRGxhEurSkjfwvSYyY8XSQTXfLEamGRexIrGRznhHrYko5WEMS5aoG9Si
      O3c7lQLkA4Q2K0mETe9ArlKQ2Kp/fYtwHoW6TUHoqSp0Foni+peWItKvi8/gJr2C
      GCxbfSWETSWunwXO2wo1TL9yhdhVxJrf6IH4aQIDAQABAoIBAH7pG8nZ/GTKp8R3
      Ps8GZHSw1MHW3/X9lCTx+bLqTqXgZNjXWaPTbfnEX9J284aE76UbaJo7TS38pcML
      JezrdQfXwFLAeyTg4g1KQt92U+jWkcju6wAXlRtTlLB+R6Y1NaGvAuwjfEvaOSQJ
      7yNl6HKGxYHS7fIysxeWUwtbJ+gLkaVDHwe3Ordp07tYalhBlaFn45oxwxsvJ9TK
      ED89NtfiZBk5bQ1ivy7a7FJhYzV+haNLmwE1aZ86rKN6dhM0NMFCBboxu5hVrBtR
      Y1k4ARCLgoJItZwc05w+HyW3c7Md5Zbw7u64qxp2lvHIneDP0KhhH7az83Lg7kza
      HSkrgP0CgYEA8tcVCDcPLBgcFvJPxSA5OsNLKjbiDhfff7eI76JKVikbYjJgH4qH
      jZIHQWNpjPj4PGiNQWcsgzNVtgB3dOUdMND1cC7JMHljVAd+80nFxBU9NCN22Wap
      T2Ax992l+dMhjhpmfdt3MNVgLkaV5fS0jujDmupXWdhvbaiB2z7QhPMCgYEAyDmt
      zjC0I1A5Hsp5IQV0K5aPocU/kYjCpnxn5RKvQZ1CF3CFyhQZJ3zNDBEE1ZkTZzqu
      aU6WMsNEXNTLzCHKyuOV002QEMF7iQOQjLGDpcCAG2UIe3KCf9NrfzqqfScVhVFx
      G5Z/enslCCfH6azExNRdBBGJJIWzrmHcYko5lDMCgYEAh6WdGfmnf/n3ttmjtXlK
      foiYc/w0SasMLUtYMoN1Aqvzn+aDyxqWnX30j5H4Y8au4w+D2ATJ2H/UYNXh5GoW
      5C3U69U2jN1Bnq6RO1T6I425omYs/UNbT/tr7gjhratCEx6sIaF18tE96JuFH+6Q
      7UMYAHDmWkmL9LUr1ExCLgECgYBVfTsWhHkFcuVQnkalsLxvN/PPsHZ53xitGQUL
      K7UkoM5tT5/wLjCnSYQLGOElihxcwRNi5yj+N51ivYDegbcidZWtCLrwTIxAbgMz
      7z80cELCb5r1imjpxw1o31WX5i4sJB/VFacMVrPzDXkv7pJ9L+cfK5WQwH19gU8l
      sGdxPQKBgQCNXGvWn5TqDDkFBhg2JOocduGPWgQ2Q88S+Phh3AjfXSoEXnG/E62r
      qeMCofjPvpJMaUzxXEJocJQsrymzxIfVlrOyd73iwxPvnzSlTXU90QCH3Z0atWVk
      Cc2WbZBHXdZxJnVbjWGReuEFiMGAW0nplrol3RjorBD2x7FQSAqj/w==
      -----END RSA PRIVATE KEY-----
  nodeSelector: {}
  tolerations: []
  affinity: {}
